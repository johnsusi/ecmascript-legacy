include(CheckCXXCompilerFlag)
include(CMakeParseArguments)

IF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE RelWithDebInfo)
ENDIF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

function(add_cxx_compiler_flag name flag)
  cmake_parse_arguments(ARG "DEBUG;REQUIRED" "" "UNLESS" ${ARGN})
  if (ARG_UNLESS)
    foreach(COND ${ARG_UNLESS})
      if (${COND})
        return()
      endif()
    endforeach()
  endif()
  check_cxx_compiler_flag(${flag} COMPILER_SUPPORTS_${name})
  if (COMPILER_SUPPORTS_${name})
    if (ARG_DEBUG)
      set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${flag}" PARENT_SCOPE)
    else()
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
    endif()
    set(COMPILER_SUPPORTS_${name} YES PARENT_SCOPE)
  elseif (NOT ARG_REQUIRED)
    set(COMPILER_SUPPORTS_${name} NO PARENT_SCOPE)
  else ()
    message(FATAL_ERROR "Compiler does not support ${flag}!")
  endif()
endfunction()

add_cxx_compiler_flag(CXX14     "-std=c++14")

add_cxx_compiler_flag(STDLIB_LIBCXX "-stdlib=libc++")

add_cxx_compiler_flag(WALL      "-Wall" )
add_cxx_compiler_flag(WERROR    "-Werror" DEBUG )
add_cxx_compiler_flag(WPEDANTIC "-Wpedantic" )

add_cxx_compiler_flag(COLOR_DIAGNOSTICS_ALWAYS "-fcolor-diagnostics=always")
add_cxx_compiler_flag(COLOR_DIAGNOSTICS        "-fcolor-diagnostics" UNLESS COMPILER_SUPPORTS_COLOR_DIAGNOSTICS_ALWAYS)
